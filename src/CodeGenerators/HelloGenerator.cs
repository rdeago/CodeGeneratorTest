using System;
using System.Text;
using Microsoft.CodeAnalysis;

namespace CodeGenerators;

[Generator(LanguageNames.CSharp, LanguageNames.VisualBasic)]
public class HelloGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var languageProvider = context.ParseOptionsProvider.Select((p, _) => p.Language);
        context.RegisterSourceOutput(languageProvider, (spc, language) =>
        {
            var sb = new StringBuilder();
            sb = language switch {
                LanguageNames.CSharp => sb
                    .AppendLine("// <auto-generated/>")
                    .AppendLine()
                    .AppendLine("internal static class Hello")
                    .AppendLine("{")
                    .AppendLine("    public static string World => \"Hello world!\";")
                    .AppendLine("}"),
                LanguageNames.VisualBasic => sb
                    .AppendLine("' <auto-generated/>")
                    .AppendLine()
                    .AppendLine("Option Compare Binary")
                    .AppendLine("Option Explicit On")
                    .AppendLine("Option Infer On")
                    .AppendLine("Option Strict On")
                    .AppendLine()
                    .AppendLine("Namespace Global")
                    .AppendLine()
                    .AppendLine("Friend Module Hello")
                    .AppendLine()
                    .AppendLine("    Public ReadOnly Property World() As String = \"Hello world!\"")
                    .AppendLine()
                    .AppendLine("End Module")
                    .AppendLine()
                    .AppendLine("End Namespace"),
                _ => throw new InvalidOperationException($"Unexpected source language '{language ?? "<null>"}'."),
            };

            spc.AddSource("Hello", sb.ToString());
        });
    }
}
